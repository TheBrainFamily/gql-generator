import td from "testdouble";

import { ResolversParentTypes, {{#if hasArguments}}{{typeName}}{{capitalizedFieldName}}Args{{/if}} } from "../../../../graphql/generated";
import { {{typeName}}{{capitalizedFieldName}} } from "./{{typeName}}{{capitalizedFieldName}}";
import {MyContext} from "../../../../types";


const test{{typeName}}{{capitalizedFieldName}} = (parent: ResolversParentTypes["{{typeName}}"], {{#if hasArguments}}variables: {{typeName}}{{capitalizedFieldName}}Args,{{/if}} context: MyContext) => {{typeName}}{{capitalizedFieldName}}(parent, {{#if hasArguments}}variables{{else}} {} {{/if}}, context, null)


test("{{typeName}}{{capitalizedFieldName}}", async () => {

const context = td.object<MyContext>();

    // td.when(context.{{moduleName}}Repository.findOne()).thenResolve()

    const parent: ResolversParentTypes["{{typeName}}"] = {}
    {{#if hasArguments}}
        const variables: {{typeName}}{{capitalizedFieldName}}Args = {}
    {{/if}}

    const result = await test{{typeName}}{{capitalizedFieldName}}(parent, {{#if hasArguments}}variables,{{/if}} context);

    });
